generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  ADMIN_GUEST
}

model User {
  id            String          @id @default(cuid())
  name          String
  firstName     String?
  lastName      String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  favoritesProperties Property[] @relation("UserFavorites")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum PropertyStatus {
  FOR_SALE
  PENDING
  SOLD
  RENTED
}

enum FeatureCategory {
  INTERIOR
  EXTERIOR
  COMMUNITY
  UTILITY
  OTHER
}

model Feature {
  id          String           @id @default(cuid())
  name        String
  category    FeatureCategory
  properties  PropertyFeature[]
}

model PropertyFeature {
  propertyId String
  featureId  String

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  feature  Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([propertyId, featureId])
}

model Property {
  id          String           @id @default(cuid())
  title       String
  featured    Boolean @default(false)
  description String   @db.Text
  price       Float
  status      PropertyStatus   @default(FOR_SALE)
  address     String
  city        String
  state       String
  zipCode     String
  bedrooms    Int
  bathrooms   Int
  squareFeet  Int
  yearBuilt   Int
  images      String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  agentId     String
  agent       Agent            @relation(fields: [agentId], references: [id])
  
  favoredBy   User[]           @relation("UserFavorites")
  features    PropertyFeature[]

  @@index([city, state])
  @@index([price])
  @@index([status])
}

model Agent {
  id                String     @id @default(cuid())
  name              String
  email             String     @unique
  phone             String
  image             String
  bio               String?    @db.Text
  rating            Float?
  yearsOfExperience Int?
  propertiesSold    Int?
  languages         String?
  certifications    String?
  properties        Property[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

